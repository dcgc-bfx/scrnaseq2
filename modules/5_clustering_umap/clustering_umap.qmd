---
# Module-specific parameters (that are not already in the profile yaml)
# Defaults
params:
  # Name of the module used in configurations
  module: "clustering_umap"
    
  # Relative path to the module directory (which contains the qmd file)
  module_dir: "modules/5_clustering_umap"

  # Path to previous module. If null, will be read from the 'chapters' entry in the profile yaml
  prev_module_dir: null
  
  # Default assay. If null, will be set to the default assay of the input Seurat object.
  default_assay: null
  
  # Which dimensionality reduction(s) to use. These have to beeen already computed in a previous module.
  # Examples are 'rna_pca' (just use the PCA of assay RNA), 'rna_cca' (use the CCA integration of assay RNA), ...
  # If null, will be set to the default reduction of the default assay of the input Seurat object.
  # If multiple are specified, the first one will be used as default.
  dimensionality_reductions: null

  # Number of dimensions to use. 
  dim_n: 10
  
  # Cluster resolution(s) to use. 
  # If multiple are specified, the first one will be used as default.
  cluster_resolution: 
  - 0.5

  # Number of neighbors to look at for clustering
  cluster_k: 20
  
  # Number of neighbors to look at for umap calculation
  umap_k: 30
    
  # For large datasets: Do not keep counts in memory but store on disk in matrix directories. 
  # Computations will access only the relevant parts of the data. 
  # Once done, matrix directories will be saved together with the Seurat object in the module directory.
  on_disk_counts: true
  
  # For large datasets: Copy matrix directories to a temporary directory for computations. 
  # This will improve performance if the temporary directory  has a better performance than normal disks (e.g. SSD). 
  # Once done, matrix directories will be copied back to the module directory. 
  # The temporary directory will be deleted once the R session exists.
  on_disk_use_tmp: true
  
  # Use sketch-based methods for further analyses
  use_sketching: false
  
  # Number of cores to use for computations
  cores: 4
  
# Module execution
execute:
  # Should this module be frozen and never re-rendered?
  # - auto: if the code has not changed (default)
  # - true/false: freeze/re-render
  # Does not apply in interactive mode or when explicitly rendering this document via in rstudio
  freeze: auto
---

# Clustering and UMAP

```{r}
#| label: setup

# Note: Setup chunk changes working directory automatically to the folder of this qmd file

# If running code interactively in rstudio, set profile here
# When rendering with quarto, profile is already set and should not be overwritten
if (nchar(Sys.getenv("QUARTO_PROFILE")) == 0) {Sys.setenv("QUARTO_PROFILE" = "scrnaseq")}

# Load libraries
library(knitr)
library(magrittr)
library(gt)
library(Seurat)
library(ggplot2)
library(future)
library(patchwork)
library(clustree)

# Get module directory (needed to access files within the module directory)
module_dir = params$module_dir
```

```{r}
#| label: clustering_preparation

# CODE
# Source general configurations (always)
source("R/general_configuration.R")

# Source required R functions
source("R/functions_util.R")
source("R/functions_io.R")
source("R/functions_plotting.R")
source("R/functions_analysis.R")

# Be verbose or not
verbose = param("verbose")

# Parallelisation plan for all functions that support future
plan(multisession, workers=param("cores"))

# DIRECTORIES
# Module directory 'results' contains all output that should be provided together with the final report of the project
dir.create(file.path(module_dir, "results"), showWarnings=FALSE)
files = list.files(path=file.path(module_dir, "results"), full.names=TRUE)
if (length(files) > 0) unlink(files, recursive=TRUE)

# Module directory 'sc' contains the final Seurat object
dir.create(file.path(module_dir, "sc"), showWarnings=FALSE)
files = list.files(path=file.path(module_dir, "sc"), full.names=TRUE)
if (length(files) > 0) unlink(files, recursive=TRUE)

# SEURAT OBJECT
# Read in seurat object
if (!is.null(param("prev_module_dir"))) {
  prev_module_dir = param("prev_module_dir")
} else {
  prev_module_dir = PreviousModuleDir(module_dir)
}
prev_sc_obj = file.path(prev_module_dir, "sc", "sc.rds")
if(!file.exists(prev_sc_obj)) {
  stop(FormatString("Could not find a sc.rds file in {prev_module_dir}. Was the respective module already run?"))
}
sc = SeuratObject::LoadSeuratRds(prev_sc_obj)

# Check that the Seurat object is okay
if (length(SeuratObject::Layers(sc)) == 0) {
  stop("No layers found in Seurat object. Please check the input object.")
}

# Set default assay standard
default_assay = param("default_assay")
if (is.null(default_assay)) default_assay = Seurat::DefaultAssay(sc)
Seurat::DefaultAssay(sc) = default_assay

# ON-DISK LAYERS (if used)
on_disk_counts = param("on_disk_counts")

# If requested, move on-disk layers to faster temp location for faster access
#on_disk_use_tmp = param("on_disk_use_tmp")

# Note: on-disk data is not used in this module, therefore deactivated
on_disk_use_tmp = on_disk_use_tmp = FALSE
if (on_disk_counts & on_disk_use_tmp) {
  on_disk_path = tempdir()
  with_progress({
    sc = UpdateMatrixDirs(sc, dir=on_disk_path)
  }, enable=verbose)
}

# CHECKS
# If sketching should be used, check for the sketch assay and then set as default
use_sketching = param("use_sketching")
if (use_sketching) {
  sketched_assay = paste0(Seurat::DefaultAssay(sc), "sketch")
  if (!sketched_assay %in% SeuratObject::Assays(sc)) {
    stop(FormatMessage("The option 'use_sketching' is set to true but the sketch assay {sketched_assay} was not found."))
  }
  SeuratObject::DefaultAssay(sc) = sketched_assay
}
```

## Clustering

Seurat's clustering method first constructs a graph structure, where nodes are cells and edges are drawn between cells with similar gene expression patterns. Technically speaking, Seurat first constructs a K-nearest neighbor (KNN) graph based on Euclidean distance in PCA space, and refines edge weights between cells based on the shared overlap in their local neighborhoods (Jaccard similarity). To partition the graph into highly interconnected parts, cells are iteratively grouped together using the Leiden algorithm @Traag_2019. 

::: {.callout-tip title="Further explanation on clustering" collapse="true"}

At this point, we would like to define subpopulations of cells with similar gene expression profiles using unsupervised clustering. Clusters ultimately serve as approximations for biological objects like cell types or cell states.

During the first step of clustering, a K-nearest neighbor (KNN) graph is constructed. In simplified terms this means that cells are connected to their K nearest neighbors based on cell-to-cell expression similarity using the PCs chosen in the previous step. The higher the similarity is, the higher the edge weight becomes. During the second step, the graph is partitioned into highly interconnected communities, whereby each community represents a cluster of cells with similar expression profiles. The separation of the graph into clusters is dependent on the chosen resolution. For scRNA-seq datasets of around 3000 cells, it is recommended to use a resolution value between 0.4 and 1.2. This value can be set even higher for larger datasets. Note that the choice of PCs and cluster resolution is an arbitrary one. Therefore, it is highly recommended to evaluate clusters and re-run the workflow with adapted parameters if needed. 

:::

### Clustering resolution

To get a first idea about how different cluster resolution values influence the clustering, we run and visualize the clustering multiple times, see below. 

```{r}
#| label: clustering
#| results: asis

dimensionality_reductions = param("dimensionality_reductions")
if (is.null(dimensionality_reductions)) dimensionality_reductions = DefaultReduct(sc, assay=default_assay)
cluster_resolutions = param("cluster_resolution") %>% unlist() %>% as.numeric()
dim_n = param("dim_n") %>% as.integer()

# Calculate per dimensionality reduction (e.g. rna_pca, rna_cca, ...)
first_clustering = NULL
for (reduct in dimensionality_reductions) {
  assay = default_assay
  
  # If sketching is used, start with the sketched reduct (e.g. rnasketch_pca)
  if (use_sketching) {
    assay = sketched_assay
    reduct = DefaultReduct(sc, assay=sketched_assay)
  }
  
  # Graph names (e.g. rna_pca_snn)
  graph_name = gsub("[^_]+_", "", reduct)
  graph_name = paste0(assay, "_", graph_name)
  nn_graph_name = paste0(graph_name, "_nn") %>% tolower()
  snn_graph_name = paste0(graph_name, "_snn") %>% tolower()
  
  # Cluster name prefix (e.g. RNA_pca)
  cluster_prefix = gsub("[^_]+_", "", reduct)
  cluster_prefix = paste0(assay, "_", cluster_prefix)
  
  # Find neighbors for clustering
  sc = Seurat::FindNeighbors(sc, 
                             reduction=reduct, 
                             dims=1:dim_n, 
                             verbose=verbose, 
                             k.param=param("cluster_k"),
                             graph.name=c(nn_graph_name, snn_graph_name))

  # Find clusters based on the neighbors
  sc = Seurat::FindClusters(sc, 
                            graph.name=snn_graph_name,
                            resolution=sort(cluster_resolutions),
                            algorithm=4, 
                            verbose=verbose, 
                            method="igraph")
  
  # Rename cluster names and add colours
  for (res in cluster_resolutions) {
    # Rename (e.g. to RNA_pca_snn0.5)
    old_name = paste0(snn_graph_name, "_res.", res)
    new_name = paste0(cluster_prefix, "_snn", res)
    sc@meta.data = sc@meta.data %>% dplyr::rename(dplyr::all_of(setNames(old_name, new_name)))
    
    # Colours
    bcs = SeuratObject::Cells(sc[[assay]])
    barcode_metadata = sc[[]][bcs, ]
    l = levels(barcode_metadata[, new_name])
    col = ScColours(sc, "seurat_clusters")[1:length(l)]
    names(col) = l
    col = list(col)
    names(col) = new_name
    sc = ScAddColours(sc, colours=col)
    
    # Keep track of first clustering
    if (is.null(first_clustering)) first_clustering = new_name
  }
}
  
# Set default clustering
default_name = first_clustering
sc$seurat_clusters = sc[[]][, default_name]
SeuratObject::Idents(sc) = "seurat_clusters"
```

```{r}
#| label: clustering_umap

# Calculate UMAP per dimensionality reduction (e.g. rna_pca, rna_cca, ...)
first_umap = NULL
for (reduct in dimensionality_reductions) {
  assay = default_assay
  
  # If sketching is used, start with the sketched reduct
  if (use_sketching) {
    assay = sketched_assay
    reduct = DefaultReduct(sc, assay=sketched_assay)
  }
  
  # UMAP name and key (e.g. rna_pca_umap)
  umap_name = paste0(reduct, "_umap")
  umap_key = gsub("[\\._]+", " ", umap_name) %>%
    stringr::str_to_title() %>%
    gsub(" ", "", .)
  umap_key = paste0(umap_key, "_")
  
  # Compute UMAP
  sc = Seurat::RunUMAP(sc, 
                       reduction=reduct, 
                       dims=1:dim_n, 
                       verbose=verbose, 
                       umap.method="uwot", 
                       n.neighbors=param("umap_k"),
                       reduction.name=umap_name,
                       reduction.key=umap_key,
                       return.model=use_sketching)
  
  # Keep track of first UMAP
  if (is.null(first_umap)) first_umap = umap_name
}

# Set default visualization
DefaultVisualization(sc, assay=assay) = first_umap
```

```{r}
#| label: clustering_project_results
#| eval: !expr use_sketching
#| include: !expr use_sketching

# Project to full dataset if sketching was used
if (use_sketching) {
  first_clustering = NULL
  first_umap = NULL
  for (reduct in dimensionality_reductions) {
    # Name of sketched and full reduction (e.g. rnasketch_pca and rna_pca)
    sketched_reduct = gsub("[^_]+_", "", reduct)
    sketched_reduct = paste0(sketched_assay, "_", sketched_reduct) %>% tolower()
    full_reduct = reduct
    
    # Names of the sketched and full clusterings (e.g. RNAsketch_pca_snn0.5 and RNA_pca_snn0.5)
    sketched_clustering = gsub("[^_]+_", "", reduct)
    sketched_clustering = paste0(sketched_assay, "_", sketched_clustering, "_snn", cluster_resolutions)
    full_clustering = gsub("[^_]+_", "", reduct)
    full_clustering = paste0(default_assay, "_", full_clustering, "_snn", cluster_resolutions)
    
    # Cell metadata columns to project from sketched to full assay
    sketched_cols = sketched_clustering[order(cluster_resolutions)]
    full_cols = full_clustering[order(cluster_resolutions)]

    # Project labels and embeddings
    sc = Seurat::ProjectData(sc, 
                             assay=default_assay,
                             sketched.assay=sketched_assay,
                             sketched.reduction=sketched_reduct,
                             full.reduction=full_reduct,
                             normalization.method	= ifelse(grepl(pattern="sct", x=default_assay), "SCT", "LogNormalize"),
                             dims=1:dim_n,
                             recompute.neighbors=TRUE,
                             recompute.weights=TRUE,
                             verbose=verbose,
                             umap.model=paste0(sketched_reduct, "_umap"),
                             refdata=as.list(setNames(sketched_cols, full_cols)))
    
    # Rename and fix keys for full UMAP (e.g. to rna_pca_umap)
    old_name = paste0("full.", sketched_reduct, "_umap")
    new_name = paste0(full_reduct, "_umap")
    new_key = gsub("[\\._]+", " ", new_name) %>%
      stringr::str_to_title() %>%
      gsub(" ", "", .)
    new_key = paste0(new_key, "_")
    um = sc[[old_name]]
    SeuratObject::Key(um) = new_key
    sc[[old_name]] = NULL
    sc[[new_name]] = um
    
    # Fix levels of full clustering and add colours
    for(i in seq_along(sketched_clustering)) {
      # Fix levels
      sketched_name = sketched_clustering[i]
      full_name = full_clustering[i]
      bcs = SeuratObject::Cells(sc[[sketched_assay]])
      barcode_metadata = sc[[]][bcs, ]
      lvls = levels(sc[[]][, sketched_name])
      sc[[]][, full_name] = factor(sc[[]][, full_name], levels=lvls)
      
      # Fix colours
      col = ScColours(sc, sketched_name)
      col = list(col)
      names(col) = full_name
      sc = ScAddColours(sc, colours=col)
      
      # Keep track of first clustering and UMAP
      if (is.null(first_clustering)) first_clustering = full_name
      if (is.null(first_umap)) first_umap = new_name
    }
  }
  
  # Set default clustering
  default_name = first_clustering
  sc$seurat_clusters = sc[[]][, default_name]
  SeuratObject::Idents(sc) = "seurat_clusters"
  
  # Set default UMAP (e.g. 'umap')
  default_umap = first_umap
  DefaultVisualization(sc, assay=default_assay) = default_umap
  
  # Set default assay
  SeuratObject::DefaultAssay(sc) = default_assay
}
```


```{r}
#| label: clustering_tests
#| results: asis
#| echo: false

# Test different dimensionality reduction methods and clustering resolution parameters
plist = list()
captions = c()
for (reduct in dimensionality_reductions) {
  for (res in sort(cluster_resolutions)) {
    assay = default_assay
    reduct_short = gsub("[^_]+_", "", reduct)
    
    # Clustering and UMAP name (always full dataset)
    clustering_name = paste0(assay, "_", reduct_short, "_", "snn", res)
    umap_name = paste0(tolower(assay), "_", reduct_short, "_umap")
    
    # Add plot to list
    plist[[clustering_name]] = Seurat::DimPlot(sc, reduction=umap_name, group.by=clustering_name, label=TRUE) + 
      scale_color_manual(values=ScColours(sc, clustering_name)) +
      AddPlotStyle(legend_position="none", title="")
    
    # Add caption
    captions = c(captions, FormatString("UMAP for dimensionality reduction {reduct}, clustering resolution {res}"))
  }
}

# Set up layout and automatically generate chunks
chunk_template = "
\`\`\`{r}
#| label: fig-clustering_{{name}}
#| fig-cap: {{caption}}
#| fig-width: 2.6
#| fig-height: 3
#| echo: false

plist[['{{name}}']]
\`\`\`
"

cat("::: {layout-ncol=3}\n", sep="")

for (i in seq_along(plist)) {
  chunk_filled =  knitr::knit_expand(text=chunk_template, name=names(plist)[i], caption=captions[i])
  if (interactive()) {
    print(EvalKnitrChunk(chunk_filled))
  } else {
    chunk_filled = knitr::knit_child(text=chunk_filled, envir=environment(), quiet=TRUE)
    cat(chunk_filled, sep='\n')
  }
}

cat(":::\n")
```

```{r}
#| label: clustering_umap_tests_spatial
#| eval: !expr length(Seurat::Images(sc)) > 0
#| include: !expr length(Seurat::Images(sc)) > 0
#| results: asis

if (length(Seurat::Images(sc)) > 0) {

  # Test different dimensionality reduction methods and clustering resolution parameters
  clusterings_to_plot = purrr::map(dimensionality_reductions, function(reduct) {
    reduct_short = gsub("[^_]+_", "", reduct)
    return(paste0(default_assay, "_", reduct_short, "_", "snn", sort(cluster_resolutions)))
  }) %>% purrr::flatten_chr()
  
  # Generate plots
  plist = purrr::map(SeuratObject::Images(sc), function(i) {
      pl = DimPlotSpatial(sc, images=i, group.by=clusterings_to_plot, combine=FALSE) %>% purrr::flatten()
      pl = purrr::map(seq(pl), function(i) {
          p = pl[[i]] + theme(legend.title=element_blank()) + ggtitle(clusterings_to_plot[i]) + scale_fill_manual(values=ScColours(sc, clusterings_to_plot[i]))
          return(p)
      })
      names(pl) = clusterings_to_plot
      return(pl)
  })
  names(plist) = gsub(pattern="^image\\.", replacement="", x=SeuratObject::Images(sc))
  
  # Set up layout and automatically generate chunks
  chunk_template = "
\`\`\`{r}
#| label: fig-clustering_spatial_{{clstr}}_dataset_{{ident}}
#| fig-cap: {{caption}}
#| echo: false
#| dev: png

plist[['{{ident}}']][['{{clstr}}']]
\`\`\`
"
  
  cat("::: panel-tabset\n")
  
  for(ident in names(plist)) {
      cat("#####", ident, "\n")
          
      # Generate captions
      captions = purrr::map(dimensionality_reductions, function(reduct) {
        cap = FormatString("Spatial plot for dataset {ident}, dimensionality reduction {reduct}, clustering resolution {cluster_resolutions}")
        return(cap)
      }) %>% purrr::flatten_chr()
  
      for(i in seq(plist[[ident]])) {
          clstr = names(plist[[ident]])[i]
          
          # Fill out chunk template
          chunk_filled =  knitr::knit_expand(text=chunk_template, ident=ident, clstr=clstr, caption=captions[i])
          # Render chunk
          if(interactive()) {
              print(EvalKnitrChunk(chunk_filled))
          } else {
              chunk_filled = knitr::knit_child(text=chunk_filled, envir=environment(), quiet=TRUE)
              cat(chunk_filled, sep='\n')
          }
      }    
  }
  
  cat(":::\n")
}
```

### Clustering Tree

Clustering trees help in understanding how clusters split or merge as the resolution changes in data analysis. Each node represents a cluster at a given resolution, and edges between nodes indicate how clusters from one resolution relate to clusters at another resolution. This makes it easier to track cluster stability or transitions, aiding in the selection of an appropriate resolution for downstream analysis.

::: {.callout-tip title="What is the best resolution for my experiment?" collapse="true"}
When selecting the optimal resolution for your experiment, it's crucial to identify the resolution where nodes have multiple incoming edges. This indicates where clusters from different resolutions converge, providing valuable insight into cluster behavior.
:::

```{r}
#| label: clustering_umap_clustree
#| results: asis
#| fig-cap: "Clustering tree based on clusters derived from various resolutions"

# Make plots per dimensionality reduction showing the different clustering resolutions
plist = purrr::map(dimensionality_reductions, function(reduct) {
  # Get assay and clustering columns
  assay = default_assay
  reduct_short = gsub("[^_]+_", "", reduct)
  clustering_prefix = paste0(assay, "_", reduct_short, "_", "snn")
  clustering_names = paste0(clustering_prefix, sort(cluster_resolutions))
  
  # Now extract a table with clusterings for the barcodes of the current assay
  bcs = SeuratObject::Cells(sc[[assay]])
  clusterings = sc[[]][bcs, clustering_names]
  
  # Remove rows with missing values
  keep = which(rowSums(is.na(clusterings)) == 0)
  clusterings = clusterings[keep,]

  # Create clustering tree
  clust_tree_plot = clustree(clusterings, prefix = clustering_prefix) +
    theme(legend.box = "vertical") +
    guides(color = guide_legend(title = "Resolution", position = "bottom"),
           edge_alpha = guide_legend(title = "Proportion of\nincoming cells", 
                                     position = "right"),
           size = "none") +
    scale_edge_colour_gradientn(name = "Cell count", 
                                colours = c("darkblue", "green4", "yellow"))
  
  clust_tree_plot = clust_tree_plot + 
    ylim(layer_scales(clust_tree_plot)$y$range$range[1] - 0.2, 
                         layer_scales(clust_tree_plot)$y$range$range[2] + 0.5)
  
  return(clust_tree_plot)
})
names(plist) = dimensionality_reductions

# Set up layout and automatically generate chunks
chunk_template = "
\`\`\`{r}
#| label: fig-clustering_umap_clustree_{{reduct}}
#| fig-cap: {{caption}}
#| echo: false

plist[['{{reduct}}']]
\`\`\`
"

for (reduct in names(plist)) {
  chunk_filled =  knitr::knit_expand(text=chunk_template, reduct=reduct, caption=FormatString("Clustering tree for assay {default_assay} based on clusters derived from various resolutions for dimensionality reduction {reduct}."))
  if (interactive()) {
    print(EvalKnitrChunk(chunk_filled))
  } else {
    chunk_filled = knitr::knit_child(text=chunk_filled, envir=environment(), quiet=TRUE)
    cat(chunk_filled, sep='\n')
  }
}

```

```{r}
#| label: fig-clustering_umap_final_clustering
#| results: asis

reduct = gsub("[^_]+_", "", dimensionality_reductions[1])
res = cluster_resolutions[1]
default_clustering = paste0(default_assay, "_", reduct, "_snn", res)

# Write message about default clustering
CalloutBox("Default clustering for assay {default_assay} is set to the dimensionality reduction {reduct} with resolution {res}.", type="note")

# Create a copy named "umap" for the default (full) umap. This allows to run FeaturePlot without specifying the UMAP (makes it easier). 
default_umap = DefaultVisualization(sc, assay=default_assay)
um = sc[[default_umap]]
SeuratObject::Key(um) = "Umap_"
sc[["umap"]] = NULL
sc[["umap"]] = um

# Also set default assay
SeuratObject::DefaultAssay(sc) = default_assay
```


## Visualization with UMAP

We use a UMAP to visualize and explore a dataset. The goal is to place similar cells together in 2D space, and learn about the biology underlying the data. Cells are color-coded according to the graph-based clustering, and clusters typcially co-localise on the UMAP.

Take care not to mis-read a UMAP:
  
* Parameters influence the plot (we use defaults here)
* Cluster sizes relative to each other mean nothing, since the method has a local notion of distance
* Distances between clusters might not mean anything
* You may need more than one plot

For a nice read to intuitively understand UMAP, see [here](https://pair-code.github.io/understanding-umap/).

```{r}
#| label: clustering_umap_print
#| results: asis

# Generate UMAPS that are colored by cluster and by sample

# Labels for the UMAP
bcs = SeuratObject::Cells(sc[[default_assay]])
barcode_metadata = sc[[]][bcs, ]

idents = SeuratObject::Idents(sc)[bcs]
cluster_cells = table(idents)
cluster_labels = paste0(levels(idents)," (", cluster_cells[levels(idents)],")")

orig_idents = barcode_metadata[bcs, "orig.ident"]
sample_cells = table(orig_idents)
sample_labels = paste0(levels(orig_idents)," (", sample_cells[levels(orig_idents)],")")

# Initialize Plots 
plist=list()
plist[["by_cluster"]] = list()
plist[["by_cluster"]][["all_samples"]] = Seurat::DimPlot(sc, 
                                                         group.by="seurat_clusters")
plist[["by_sample"]] = list()
plist[["by_sample"]][["all_samples"]] = Seurat::DimPlot(sc, 
                                                        group.by="orig.ident")

if (length(levels(orig_idents)) <= 4 ) {
  # DimPlot has a bug when using split.by, this is a hack to fix this
  orig_ident_bckp = sc$orig.ident
  discard = !rownames(sc[[]]) %in% SeuratObject::Cells(sc[[default_assay]])
  sc$orig.ident[discard] = NA
  
  plist[["by_cluster"]][["per_sample"]] = Seurat::DimPlot(sc, 
                                                          reduction=DefaultVisualization(sc),
                                                          group.by="seurat_clusters", 
                                                          split.by="orig.ident", 
                                                          ncol=2)
  plist[["by_sample"]][["per_sample"]] = Seurat::DimPlot(sc, 
                                                         reduction=DefaultVisualization(sc), 
                                                         group.by="orig.ident", 
                                                         split.by="orig.ident", 
                                                         ncol=2)
  sc$orig.ident = orig_ident_bckp
}

# Add additional plot features
for (i in names(plist)) {
  for (j in names(plist[[i]])) {
    # Add style
    plist[[i]][[j]] = plist[[i]][[j]] + 
      AddPlotStyle(title="", legend_position="bottom", legend_title="Clusters")
    
    # Add cluster labels
    # Add cluster information to the plot if necessary
    if (! ("seurat_clusters" %in% names(plist[[i]][[j]]))) {
      plist[[i]][[j]]$data$seurat_clusters = barcode_metadata[rownames(plist[[i]][[j]]$data), "seurat_clusters"]
    }
    
    # Repel? 
    repel = ifelse((j == "per_sample") & length(unique(barcode_metadata$orig.ident)) > 5, FALSE, TRUE)
    plist[[i]][[j]] = LabelClusters(plist[[i]][[j]], 
                                    id="seurat_clusters", box=TRUE, fill="white", repel=repel, label.padding=unit(0.05, "lines"))
    
    # Add color; increase the number of rows in legend to use tzhe full width of the plot
    if (i == "by_cluster") { 
      plist[[i]][[j]] = plist[[i]][[j]] + 
          scale_color_manual(values=ScColours(sc, "seurat_clusters"), labels=cluster_labels) +
          guides(col=guide_legend(ncol=9, override.aes=list(size=3)))
    } 
    if (i == "by_sample") { 
      plist[[i]][[j]] = plist[[i]][[j]] + scale_color_manual(values=ScColours(sc, "orig.ident"), labels=sample_labels) +
          guides(col=guide_legend(ncol=7, override.aes=list(size=3)))
    }
  }
}

# Plot 
# Set up layout and automatically generate chunks
chunk_template = "
#### {{i}}_{{j}}
\`\`\`{r}
#| label: fig-clustering_umap_{{i}}_{{j}}
#| fig-cap: '{{caption}}'

plist[['{{i}}']][['{{j}}']]
\`\`\`
"

cat("::: panel-tabset\n")

for (i in names(plist)) {
  for (j in names(plist[[i]])) {
    caption = gsub(paste0("UMAP, cells coloured ", i, ", ", j),
                   pattern="_", replacement=" ", perl=FALSE)
    chunk_filled =  knitr::knit_expand(text=chunk_template, i=i, j=j, caption=caption)
    if(interactive()) {
      print(EvalKnitrChunk(chunk_filled))
    } else {
      chunk_filled = knitr::knit_child(text=chunk_filled, envir=environment(), quiet=TRUE)
      cat(chunk_filled, sep='\n')
    }
  }
}

cat(":::\n")
```

## Output

### UMAP visualization

This module produces one or more UMAP visualizations for the default assay that are stored in the Seurat object and can be used 
for downstream analyses. Each visualization is based on a different dimensionality reduction. If sketching is used, the Seurat object also includes the UMAP visualizations for the sketched assay.

```{r}
#| label: clustering_save_visualization
#| results: asis

default_vis = DefaultVisualization(sc, assay=default_assay)
vis = sc[[default_vis]]@cell.embeddings %>% as.data.frame()

# Write default visualization for default assay
outfile = FormatString("visualization_assay_{default_assay}_umap.xlsx", quote=FALSE)
openxlsx::write.xlsx(x=vis, file=file.path(module_dir, "results", outfile), rowNames=TRUE)

# Full UMAP visualizations
full_visualizations = purrr::keep(SeuratObject::Reductions(sc), function(r) {
  return(SeuratObject::DefaultAssay(sc[[r]]) == default_assay & grepl("_umap", r))
})

# Sketched UMAP visualizations
sketched_visualizations = purrr::keep(SeuratObject::Reductions(sc), function(r) {
  return(SeuratObject::DefaultAssay(sc[[r]]) == sketched_assay & grepl("_umap", r))
})

# Note
msg = "
The following UMAP visualizations for assay {default_assay} are available in the Seurat object:

- full assay: {full_visualizations*} 
- sketched assay (if sketching was used): {sketched_visualizations*}
- 'umap': alternative name for the default UMAP visualization {default_vis}

The default UMAP visualization for assay {default_assay} is 'umap' and will be used in downstream analysis. It is written to {outfile}.
"

CalloutBox(msg, type="note")  
```

### Clustering

This module produces one or more clusterings for the default assay that are stored in the Seurat object and can be used 
for downstream analyses. Each clustering is based on a specific dimensionality reduction and clustering resolution. If sketching is used, the Seurat object also includes the clusterings for the sketched assay.

```{r}
#| label: clustering_save_clustering
#| results: asis

# Write default clustering for default assay (default_clustering)
outfile = "seurat_clusters.xlsx"
openxlsx::write.xlsx(x=sc[["seurat_clusters"]], file=file.path(module_dir, "results", outfile), rowNames=TRUE)

# Clusterings for full assay
full_clusterings = purrr::map(dimensionality_reductions, function(reduct) {
    reduct_short = gsub("[^_]+_", "", reduct)
    return(paste0(default_assay, "_", reduct_short, "_", "snn", sort(cluster_resolutions)))
}) %>% purrr::flatten_chr()

# Clusterings for sketched assay
sketched_clusterings = purrr::map(dimensionality_reductions, function(reduct) {
    reduct_short = gsub("[^_]+_", "", reduct)
    return(paste0(sketched_assay, "_", reduct_short, "_", "snn", sort(cluster_resolutions)))
}) %>% purrr::flatten_chr()

# Note
msg = "
The following clusterings for assay {default_assay} are available in the Seurat object:

- full assay: {full_clusterings*} 
- sketched assay (if sketching was used): {sketched_clusterings*}
- 'seurat_clusters': alternative name for the default clustering {default_clustering}

The default clustering for assay {default_assay} stored in the column 'seurat_clusters' and will be used in downstream analysis. It is written to {outfile}.
"

CalloutBox(msg, type="note")  
```

## Software

```{r}
#| label: clustering_save_software

sessioninfo = ScrnaseqSessionInfo(getwd()) %>% as.data.frame()
gt(sessioninfo)
```

## Parameter

```{r}
#| label: read_data_save_parameter  

paraminfo = ScrnaseqParamsInfo(param()) %>% as.data.frame()
gt(paraminfo)
```

```{r}
#| label: clustering_save_seurat

# If sketching was used, revert back to non-sketched assay
if (use_sketching) {
  SeuratObject::DefaultAssay(sc) = default_assay
}

# Save Seurat object and layer data
# Note: counts and normalized data have not been changed in this module, no copying needed
outdir = file.path(module_dir, "sc")
with_progress({
  SaveSeuratRdsWrapper(sc,
                       outdir=outdir,
                       write_disk_data=FALSE,
                       relative_paths=FALSE,
                       compress=FALSE
                       )
}, enable=verbose)
```

```{r}
#| label: clustering_finish

# Stop multisession workers
plan(sequential)
```
