---
# Module-specific parameters (that are not already in the profile yaml)
# Defaults
params:
  # Name of the module used in configurations
  module: "export"
    
  # Relative path to the module directory (which contains the qmd file)
  module_dir: "modules/9_export"

  # Path to previous module. If null, will be read from the 'chapters' entry in the profile yaml
  # NOTE: Change to null if all modules are implemented and sc objects are written
  prev_module_dir: null
  
  # Default assay
  default_assay: null

  # For large datasets: Do not keep counts in memory but store on disk in matrix directories. 
  # Computations will access only the relevant parts of the data. 
  # Once done, matrix directories will be saved together with the Seurat object in the module directory.
  on_disk_counts: true
  
  # For large datasets: Copy matrix directories to a temporary directory for computations. 
  # This will improve performance if the temporary directory  has a better performance than normal disks (e.g. SSD). 
  # Once done, matrix directories will be copied back to the module directory. 
  # The temporary directory will be deleted once the R session exists.
  on_disk_use_tmp: true
  
  # Export categorial cell metadata and embeddings as CSV that they can be imported in other tools.
  export_metadata: true
  
  # Export results as cloupe file for the Loupe Cell Browser. Only the default assay will be used. Only raw counts are exported.
  create_loupe_file: true
  
  # Export categorial cell metadata results as analysis.zarr.zip file for the Xenium Explorer.
  export_xenium_analysis_file: true
  
  # Export results into h5ad format for cellxgene. Only the default assay will be used.
  export_cellxgene: true
  
  # Export Seurat object.
  export_sc: true
  
  # When exporting the Seurat object, convert on-disk layers to in-memory layers.
  # If true on-disk layers are included into the Seurat object else they are kept on-disk.
  convert_on_disk_layers: false
  
  # Number of cores to use for computations
  cores: 4
  
# Module execution
execute:
  # Should this module be frozen and never re-rendered?
  # - auto: if the code has not changed (default)
  # - true/false: freeze/re-render
  # Does not apply in interactive mode or when explicitly rendering this document via in rstudio
  freeze: auto
---

# Export data

```{r}
#| label: setup

# If running code interactively in rstudio, set profile here
# When rendering with quarto, profile is already set and should not be overwritten
if (nchar(Sys.getenv("QUARTO_PROFILE")) == 0) {Sys.setenv("QUARTO_PROFILE" = "scrnaseq")}

# Load libraries
library(knitr)
library(magrittr)
library(gt)
library(Seurat)
library(ggplot2)
library(future)
library(BiocParallel)
library(patchwork)
library(reticulate)

# Get module directory (needed to access files within the module directory)
module_dir = params$module_dir
```

```{r}
#| label: export_preparation

# CODE
# Working directory is automatically back to scrnaseq2 at this point
# Source general configurations (always)
source("R/general_configuration.R")

# Source required R functions
source("R/functions_util.R")
source("R/functions_io.R")
source("R/functions_plotting.R")
source("R/functions_analysis.R")

# Be verbose or not
verbose = param("verbose")

# Parallelisation config for all functions that use the future framework
plan(multisession, workers=param("cores"))

# Parallelisation config for all functions that use the BiocParallel framework
register(SnowParam(workers=param("cores"), type="SOCK", RNGseed=getOption("random_seed"))) 

# Parallelisation config for BLAS threading. Currently set to 1 because there does not seem to be a performance gain
# but may be relevant for very large projects.
RhpcBLASctl::blas_set_num_threads(1)

# DIRECTORIES
# Module directory 'results' contains all output that should be provided together with the final report of the project
dir.create(file.path(module_dir, "results"), showWarnings=FALSE)
files = list.files(path=file.path(module_dir, "results"), full.names=TRUE)
if (length(files) > 0) unlink(files, recursive=TRUE)

# Module directory 'sc' contains the final Seurat object
dir.create(file.path(module_dir, "sc"), showWarnings=FALSE)
files = list.files(path=file.path(module_dir, "sc"), full.names=TRUE)
if (length(files) > 0) unlink(files, recursive=TRUE)

# SEURAT OBJECT
# Read in seurat object
if (!is.null(param("prev_module_dir"))) {
  prev_module_dir = param("prev_module_dir")
} else {
  prev_module_dir = PreviousModuleDir(module_dir)
}
prev_sc_obj = file.path(prev_module_dir, "sc", "sc.rds")
if(!file.exists(prev_sc_obj)) {
  stop(FormatString("Could not find a sc.rds file in {prev_module_dir}. Was the respective module already run?"))
}
sc = SeuratObject::LoadSeuratRds(prev_sc_obj)

# Check that the Seurat object is okay
if (length(SeuratObject::Layers(sc)) == 0) {
  stop("No layers found in Seurat object. Please check the input object.")
}

# Set default assay standard
default_assay = param("default_assay")
if (is.null(default_assay)) default_assay = Seurat::DefaultAssay(sc)
Seurat::DefaultAssay(sc) = default_assay

# ON-DISK LAYERS (if used)
on_disk_counts = param("on_disk_counts")

# If requested, move on-disk layers to faster temp location for faster access
on_disk_use_tmp = param("on_disk_use_tmp")

if (on_disk_counts & on_disk_use_tmp) {
  on_disk_path = tempdir()
  with_progress({
    sc = UpdateMatrixDirs(sc, dir=on_disk_path)
  }, enable=verbose)
}

# Get image names
# At the moment an image is associated with only one assay.
# For other assays, we plot all images.
image_names = SeuratObject::Images(sc, assay=default_assay)
if (length(image_names)==0) image_names = SeuratObject::Images(sc)
```

## Cell metadata

The cell metadata is exported as CSV file which includes cell ID, cluster assignment and other cell metadata. This metadata can then be imported into other tools. Export is done per dataset (with the original cell IDs) and per aggregated analysis (where the cell IDs were made unique).

```{r}
#| label: export_metadata
#| results: asis

export_metadata = param("export_metadata")

# Create CSV files that can be imported
if (export_metadata) {
  dir.create(file.path(module_dir, "results", "export_csv"), showWarnings=FALSE, recursive=TRUE)
  
  # Cell metadata to export for default assay
  categories_to_export = colnames(sc[[]])
  categories_to_export = categories_to_export[!grepl("[A-Z]sketch", categories_to_export)]
  categories_to_export = categories_to_export[categories_to_export != "orig_barcode"]
  
  # Embeddings to export for default assay
  embeddings_to_export = purrr::keep(SeuratObject::Reductions(sc), function(r) {
    return(SeuratObject::DefaultAssay(sc[[r]]) == default_assay)
  })
  
  # Only consider barcodes of the default assay
  bcs = SeuratObject::Cells(sc[[default_assay]])
  barcode_metadata = sc[[]][bcs, ]
  
  #
  # Per dataset
  #
  for(smp in levels(sc$orig.ident)) {
    dir.create(file.path(module_dir, "results", "export_csv", smp), showWarnings=FALSE, recursive=TRUE)
    
    # Get sample barcodes to extract and their original barcodes
    barcodes = barcode_metadata %>% 
      dplyr::filter(orig.ident == smp) %>% 
      rownames()
    original_barcodes = barcode_metadata%>% 
      dplyr::filter(orig.ident == smp) %>% 
      dplyr::pull(orig_barcode)
    
    # Cell metadata
    categorial_data = barcode_metadata[barcodes, c("orig_barcode", categories_to_export)]
    col_nms = colnames(categorial_data)
    col_nms[1] = "barcode"
    colnames(categorial_data) = col_nms
    readr::write_csv(x=categorial_data, file=file.path(module_dir, "results", "export_csv", smp, "Cell_metadata.csv.gz"))
    
    # Embeddings
    for( r in embeddings_to_export) {
      # Get embedding
      emb = SeuratObject::Embeddings(sc, r)
      
      # Subset for sample barcodes
      i = which(rownames(emb) %in% barcodes)
      emb = emb[i, 1:2] %>%
        as.data.frame() %>%
        tibble::rownames_to_column(var="barcode")
      
      # Replace barcode with original barcode
      i = match(emb$barcode, barcodes)
      emb$barcode = original_barcodes[i]
      
      # Write
      readr::write_csv(x=emb,
                file=file.path(module_dir, "results", "export_csv", smp, paste0("Cell_projection_", r, ".csv.gz")))
    }
  }
  
  #
  # For the aggregated analysis
  #
  dir.create(file.path(module_dir, "results", "export_csv", "all"), showWarnings=FALSE, recursive=TRUE)

  # Get original barcodes
  barcodes = rownames(barcode_metadata)
  original_barcodes = barcode_metadata$orig_barcode
  
  # Cell metadata
  categorial_data = barcode_metadata[, c("orig_barcode", categories_to_export)]
  col_nms = colnames(categorial_data)
  col_nms[1] = "barcode"
  colnames(categorial_data) = col_nms
  readr::write_csv(x=categorial_data, 
            file=file.path(module_dir, "results", "export_csv", "all", "Cell_metadata.csv.gz"))
  
  # Embeddings
  for( r in embeddings_to_export) {
    # Get embedding
    emb = SeuratObject::Embeddings(sc, r)
    emb = emb[, 1:2] %>%
      as.data.frame() %>%
      tibble::rownames_to_column(var="barcode")
    
    # Replace barcode with original barcode
    i = match(emb$barcode, barcodes)
    emb$barcode = original_barcodes[i]
    
    # Write
    readr::write_csv(x=emb,
              file=file.path(module_dir, "results", "export_csv", "all", paste0("Cell_projection_", r, ".csv.gz")))
  }
  
  CalloutBox("Cell metadata can be imported into other tools (such as an active Loupe Cell Browser session). The directory 'export_csv/datasets' contains files for the individual datasets. The directory 'export_csv/all' contains files for the aggregated analysis.", type="note")
} else {
  CalloutBox("Cell metadata was not exported.", type="note")
}
```


## Loupe Cell Browser/Xenium Explorer

The Loupe Cell Browser is a powerful tool to explore 10x single cell data. It allows you to visualize the data in a variety of ways. For download, please visit the [10x Genomics website](https://support.10xgenomics.com/single-cell-gene-expression/software/visualization/latest/what-is-loupe-cell-browser). There are also several tutorials available on the website.

Results of the analysis are exported as cloupe file which can be read by the Loupe Cell Browser. The cloupe file includes the raw counts, categorial cell metadata and visualisations like UMAP or PCA. 

**Notes**: 
- Due to license issues, this is only supported for 10x datasets. Non-10x datasets will not be exported.
- Since the Loupe Cell Browser does its own internal normalization, only the raw counts are exported.
- Spatial information is not included in the cloupe file. For 10x Visium/VisiumHD data, we recommend to use the original cloupe file provided by Spaceranger and to import the CSV cell metadata (see above for details) in Loupe. For 10x Xenium, the cloupe file can be loaded into the Loupe Cell Browser to inspect the cell clustering. For spatial information, use the Xenium explorer (see below for details).

```{r}
#| label: create_loupe_file
#| results: asis

# What do we export
create_loupe_file = param("create_loupe_file")

# Create a cloupe file for the Loupe Browser (only 10x, 10x_visium and 10x_xenium)
if (create_loupe_file & all(grepl("10x", sc$technology))) {
  dir.create(file.path(module_dir, "results", "export_loupe"), showWarnings=FALSE, recursive=TRUE)
  
  # Cell metadata to export for default assay
  # Note: Loupe does not support numeric columns
  categories_to_export = colnames(sc[[]])
  categories_to_export = categories_to_export[!grepl("[A-Z]sketch", categories_to_export)]
  categories_to_export = categories_to_export[categories_to_export != "orig_barcode"]
  
  # Embeddings to export for default assay
  embeddings_to_export = purrr::keep(SeuratObject::Reductions(sc), function(r) {
    return(SeuratObject::DefaultAssay(sc[[r]]) == default_assay)
  })
  
  # Only consider barcodes of the default assay
  bcs = SeuratObject::Cells(sc[[default_assay]])
  
  # Export as loupe file
  ExportLoupe(sc, 
              assay=SeuratObject::DefaultAssay(sc), 
              categories=categories_to_export, 
              embeddings=embeddings_to_export,
              barcodes=bcs,
              output_dir=file.path(module_dir, "results", "export_loupe"),
              output_name="scrnaseq2")
  
  CalloutBox("The following cloupe file can be loaded directly into the Loupe Cell Browser: 'export_loupe/scrnaseq2.cloupe'.", type="note")
} else {
  CalloutBox("Creating cloupe files for the Loupe Cell Browser was deactivated or is supported only for datasets of technology '10x', '10x_xenium' or '10x_visium'.", type="note")
}
```

The Xenium Explorer is a tool to explore 10x Xenium spatial data in a variety of ways. For download, please visit the [Xenium Explorer website](https://www.10xgenomics.com/support/software/xenium-explorer/latest). There are also a number of tutorials available on the [website](https://www.10xgenomics.com/support/software/xenium-explorer/latest/tutorials).

For 10x Xenium data, categorial cell metadata is exported as analysis.zarr.zip file for each dataset. Replace the original analysis.zarr.zip in the respective Xenium dataset (make a backup) to include the results of this analysis in the Xenium explorer. 

```{r}
#| label: export_xenium_analysis_file
#| eval: !expr length(SeuratObject::Images(sc)) > 0
#| include: !expr length(SeuratObject::Images(sc)) > 0
#| results: asis

export_xenium_analysis_file = param("export_xenium_analysis_file")

if (length(SeuratObject::Images(sc)) > 0) {
  if (export_xenium_analysis_file & all(grepl("10x_xenium", sc$technology))) {
    dir.create(file.path(module_dir, "results", "export_xenium"), showWarnings=FALSE, recursive=TRUE)
    
    # Cell metadata to export (ignore categories based on sketch assay)
    # Note: Xenium Explorer does not support numeric columns
    categories_to_export = colnames(sc[[]])
    categories_to_export = categories_to_export[!grepl("[A-Z]sketch", categories_to_export)]
    categories_to_export = categories_to_export[categories_to_export != "orig_barcode"]
    
    # Only consider barcodes of the default assay
    bcs = SeuratObject::Cells(sc[[default_assay]])
    
    # Export as analysis.zarr.zip files
    ExportXeniumExplorer(sc,
                         assay=SeuratObject::DefaultAssay(sc),
                         categories=categories_to_export, 
                         barcodes=bcs,
                         output_dir=file.path(module_dir, "results", "export_xenium"),
                         output_name="analysis.zarr.zip")
    
    CalloutBox("Cell metadata was exported per dataset as analysis.zarr.zip file in the 'export_xenium' directory. Replace the original analysis.zarr.zip in the respective Xenium dataset (make a backup) to include the results of this analysis in the Xenium Explorer.", type="note")
  } else {
    CalloutBox("Exporting to Xenium Explorer is supported only for datasets of technology '10x_xenium'.", type="note")
  }
}
```

## Cellxgene

Cellxgene is a web-based tool to explore single cell data. For download of the cellxgene server, please visit the [cellxgene website](https://cellxgene.cziscience.com/docs/01__CellxGene). For download of a stand-alone version that can be used locally and without installation, please visit the (portable-cellxgene)[https://github.com/george-hall-ucl/portable-cellxgene].

Results of the analysis are exported into a format that can be read by cellxgene. This includes the normalized counts, categorial data per cell and vizualisations.

```{r}
#| label: export_cellxgene
#| results: asis

export_cellxgene = param("export_cellxgene")

# Create an adata.h5ad file for cellxgene
if (export_cellxgene) {
  dir.create(file.path(module_dir, "results", "export_cellxgene"), showWarnings=FALSE)
  
  # Create a Seurat object with only the default assay and the old Seurat assay format (so that sceasy can convert to adata)
  layer_data = SeuratObject::GetAssayData(sc, assay=default_assay, layer="data")
  layer_data = as(layer_data, "dgCMatrix")
  adata = SeuratObject::CreateAssayObject(data=layer_data, assay=default_assay)
  adata = Seurat::CreateSeuratObject(adata, assay=default_assay)
  
  # Add barcode metadata for barcodes that are in the assay
  bcs = SeuratObject::Cells(adata[[default_assay]])
  barcode_metadata = sc[[]][bcs,]
  adata = SeuratObject::AddMetaData(adata, barcode_metadata)
  
  # Prepare custom colours (see https://chanzuckerberg.github.io/cellxgene/posts/prepare)
  colour_lists = purrr::map(ScColours(sc), function(l) {
    # Port color names to hex colour codes
    is_color_name = l %in% colors()
    if (any(is_color_name)) l[is_color_name] = gplots::col2hex(l[is_color_name])
    
    l = reticulate::np_array(unname(l), dtype="<U7")
    return(l)
  })
  names(colour_lists) = paste0(names(colour_lists), "_colors")
  
  # Replace NA with "NA" in barcode metadata categorial and character columns (cellxgene cannot deal with them)
  # Also add a colour for "NA" if there are custom colours
  na_columns = purrr::keep(adata[[]], function(x) return(!is.numeric(x) & any(is.na(x)))) %>% colnames()
  for(c in na_columns) {
    if (any(is.na(adata[[]][, c]))) {
      adata[[]][, c] = forcats::fct_na_value_to_level(adata[[]][, c], level="NA")
      if (c %in% names(colour_lists) & !"NA" %in% names(colour_lists[[c]])) colour_lists[[c]]["NA"] = "grey50"
    }
  }
  
  # Get embeddings for default assay and add
  embeddings_to_export = purrr::keep(SeuratObject::Reductions(sc), function(r) {
    return(SeuratObject::DefaultAssay(sc[[r]]) == default_assay)
  })
  for (emb in embeddings_to_export) {
    adata[[emb]] = sc[[emb]]
  }
  
  # Convert Seurat single cell object to python anndata object which will be accessible via reticulate here
  # Add colours
  # Write to h5ad file
  adata = sceasy::convertFormat(adata, from="seurat", to="anndata", outFile=NULL, assay=default_assay)
  adata$uns = reticulate::dict(colour_lists)
  adata$write(file.path(module_dir, "results", "export_cellxgene", "cellxgene.h5ad"), compression="gzip")

  CalloutBox("The cellxgene file is: 'export_cellxgene/cellxgene.h5ad'.", type="note")
  
} else {
  CalloutBox("The cellxgene file was not produced.", type="note")
}
```

## Seurat object

To facilitate further analysis, the Seurat object is exported. When counts are stored on disk, they will be exported as well as separate directories that need to be in the same directory as the the Seurat object. Alternatively, they can also be included in the Seurat object.

```{r}
#| label: export_sc
#| results: asis

export_sc = param("export_sc")

# Export Seurat object
if (export_sc) {
  # Save Seurat object and layer data
  outdir = file.path(module_dir, "results", "export_sc")
  with_progress({
    SaveSeuratRdsWrapper(sc,
                         outdir=outdir,
                         write_disk_data=TRUE,
                         relative_paths=TRUE,
                         compress=TRUE
                         )
  }, enable=verbose)
  
    CalloutBox("The Seurat object was exported to: 'export_sc/sc.rds' (there might be on-disk directories as well).", type="note")
} else {
  CalloutBox("The Seurat object was not exported.", type="note")
}
```

## Software

```{r}
#| label: export_save_software

sessioninfo = ScrnaseqSessionInfo(getwd()) %>% as.data.frame()
gt(sessioninfo)
```

## Parameter

```{r}
#| label: read_data_save_parameter  

paraminfo = ScrnaseqParamsInfo(param()) %>% as.data.frame()
gt(paraminfo)
```

```{r}
#| label: export_finish

# Stop multisession workers
plan(sequential)
```
