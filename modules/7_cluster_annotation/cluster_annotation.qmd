---
# Module-specific parameters (that are not already in the profile yaml)
# Defaults
params:
  # Name of the module used in configurations
  module: "cluster_annotation"
    
  # Relative path to the module directory (which contains the qmd file)
  module_dir: "modules/7_cluster_annotation"
  
  # Path to previous module. If null, will be read from the 'chapters' entry in the profile yaml
  prev_module_dir: null
  
  # Default assay.
  default_assay: null

  # Thresholds to define marker genes; only genes expressed in at least N%% of cells in each group are tested
  marker_pct: 0.25

  # Thresholds to define marker genes; fold change
  marker_log2FC: 0.25
  
  # Additional (unwanted) variables to account for in statistical tests 
  latent_vars: null 
  
  # Known markger genes
  file_known_markers: "datasets/10x_xenium_mouse_brain/selected_markers.xlsx"

  # For large datasets: Do not keep counts in memory but store on disk in matrix directories. 
  # Computations will access only the relevant parts of the data. 
  # Once done, matrix directories will be saved together with the Seurat object in the module directory.
  on_disk_counts: true
  
  # For large datasets: Copy matrix directories to a temporary directory for computations. 
  # This will improve performance if the temporary directory  has a better performance than normal disks (e.g. SSD). 
  # Once done, matrix directories will be copied back to the module directory. 
  # The temporary directory will be deleted once the R session exists.
  on_disk_use_tmp: true
  
  # Number of cores to use for computations
  cores: 4
  
# Module execution
execute:
  # Should this module be frozen and never re-rendered?
  # - auto: if the code has not changed (default)
  # - true/false: freeze/re-render
  # Does not apply in interactive mode or when explicitly rendering this document via in rstudio
  freeze: auto
---

# Cluster Annotation

```{r}
#| label: setup
#| message: false
#| warning: false

# Note: Setup chunk changes working directory automatically to the folder of this qmd file

# If running code interactively in rstudio, set profile here
# When rendering with quarto, profile is already set and should not be overwritten
if (nchar(Sys.getenv("QUARTO_PROFILE")) == 0) {Sys.setenv("QUARTO_PROFILE" = "scrnaseq")}

# Load libraries
library(knitr)
library(magrittr)
library(gt)
library(Seurat)
library(ggplot2)
library(future)
library(patchwork)

library(clusterProfiler)
library(msigdbr)
library(stringr)
library(dplyr)
library(scales)
library(openxlsx)

# Get module name and directory (needed to access files within the module directory)
module_name = params$module_name
module_dir = params$module_dir
```

```{r}
#| label: cluster_annotation_preparation

# CODE
# Working directory is automatically back to scrnaseq2 at this point
# Source general configurations (always)
source("R/general_configuration.R")

# Source required R functions
source("R/functions_util.R")
source("R/functions_io.R")
source("R/functions_plotting.R")
source("R/functions_analysis.R")
source("R/functions_degs.R")
source("R/functions_enrichment.R")

# Be verbose or not
verbose = param("verbose")

# Parallelisation plan for all functions that support future
plan(multisession, workers=param("cores"))

# DIRECTORIES
# Module directory 'results' contains all output that should be provided together with the final report of the project
dir.create(file.path(module_dir, "results"), showWarnings=FALSE)
files = list.files(path=file.path(module_dir, "results"), full.names=TRUE)
if (length(files) > 0) unlink(files, recursive=TRUE)

# Module directory 'sc' contains the final Seurat object
dir.create(file.path(module_dir, "sc"), showWarnings=FALSE)
files = list.files(path=file.path(module_dir, "sc"), full.names=TRUE)
if (length(files) > 0) unlink(files, recursive=TRUE)

# SEURAT OBJECT
# Read in seurat object
if (!is.null(param("prev_module_dir"))) {
  prev_module_dir = param("prev_module_dir")
} else {
  prev_module_dir = PreviousModuleDir(module_dir)
}
prev_sc_obj = file.path(prev_module_dir, "sc", "sc.rds")
if(!file.exists(prev_sc_obj)) {
  stop(FormatString("Could not find a sc.rds file in {{prev_module_dir}}. Was the respective module already run?"))
}
sc = SeuratObject::LoadSeuratRds(prev_sc_obj)

# Move on-disk layers to faster temp location if requested
on_disk_counts = param("on_disk_counts")
on_disk_use_tmp = param("on_disk_use_tmp")

if (on_disk_counts & on_disk_use_tmp) {
  on_disk_path = tempdir()
  with_progress({
    sc = UpdateMatrixDirs(sc, dir=on_disk_path)
  }, enable=verbose)
} else {
  on_disk_path = file.path(module_dir, "sc")
}

# Set default assay standard
default_assay = param("default_assay")
if (is.null(default_assay)) default_assay = Seurat::DefaultAssay(sc)
Seurat::DefaultAssay(sc) = default_assay
```

## Marker genes

We next identify genes that are differentially expressed in one cluster compared to all other clusters. Resulting *p*-values are adjusted using the Bonferroni method. However, note that the *p*-values are likely inflated, since both clusters and marker genes were determined based on the same gene expression data, and there ought to be gene expression differences by design. Nevertheless, *p*-values can be used to sort and prioritize marker genes. 

::: {.callout-note}

We require marker genes to be expressed in at least `r param("marker_pct") * 100`% of cells in the respective cluster, with a minimum log2 fold change of `r param("marker_log2FC")`. The names of cluster markers, alongside statistical measures and additional gene annotation are written to file.

:::

::: {.callout-tip title="What are marker genes?" collapse="true"}

As described above, cell clusters approximate cell types and states. But how do we know which cell types these are? To characterize cell clusters, we identify marker genes. Good marker genes are genes that are particularly expressed in one cluster, and existing knowledge of these marker genes can be used to extrapolate biological functions for the cluster. A good clustering of cells typically results in good marker genes. Hence, if you cannot find good marker genes you may need to go back to the start of the workflow and adapt your parameters. Note that we also determine genes that are particularly down-regulated in one cluster, even if these are not marker genes in the classical sense.

Good marker genes are highly and possibly even only expressed in one cluster as compared to all other clusters. However, sometimes marker genes are also expressed in other clusters, or are declared as marker genes in these clusters, for example cell lineage markers that are shared by different cell subtypes. To evaluate marker genes, it is essential to visualize their expression patterns.

In addition to detecting marker genes, it might be informative to detect genes that are differentially expressed between one specific cluster and one or several other clusters. This approach allows a more specific distinction of individual clusters and investigation of more subtle differences, see the section "Differentially expressed genes" below.

:::

```{r}
#| label: "cluster_annotation_markers"
#| fig-cap: "Number of markers, comparing each cluster to the rest"

# Find DEGs for every cluster compared to all remaining cells 
# Report up-regulated DEGS (=markers NAMING CONVENTION) and down-regulated ones

# Prepare SCT for marker detection
if (grepl(pattern="_SCT$", x=default_assay, perl=TRUE)) sc = Seurat::PrepSCTFindMarkers(object=sc, assay=default_assay)


# Latest best-practice paper recommends to use a Wilcox test
# RunPresto is a wrapper around "immunogenomics/presto", which is a fast implementation of a Wilcox test
markers = SeuratWrappers::RunPrestoAll(object=sc,
                                       assay=default_assay,
                                       test.use="wilcox",
                                       slot="data",
                                       only.pos=FALSE,
                                       min.pct=param("marker_pct"),
                                       logfc.threshold=param("marker_log2FC"),
                                       latent.vars=param("latent_vars"),
                                       verbose=FALSE)

# If no markers were found, initialize the table so that further downstream chunks run
if (ncol(markers)==0) markers = DegsEmptyMarkerResultsTable(levels(sc$seurat_clusters))

# Sort markers (function "DegsSort" in "R/functions_degs.R")
markers = markers %>% DegsSort(group=c("cluster"))
  
# Filter markers (function "DegsFilter" in "R/functions_degs.R")
markers_filt = DegsFilter(markers, cut_log2FC=param("marker_log2FC"))
markers_found = nrow(markers_filt$all) > 0

# Add average data to table (function "DegsAvgDataPerIdentity" in "R/functions_degs.R")
# Note that markers_out is written to file at the end of the module
markers_out = cbind(markers_filt$all, DegsAvgDataPerIdentity(sc, genes=markers_filt$all$gene, assay=default_assay))

# Add marker table to Seurat object
Seurat::Misc(sc, paste0("markers_", default_assay)) = list(condition_column="seurat_clusters", test="wilcox", 
                                   log2FC=param("marker_log2FC"), 
                                   min_pct=param("marker_pct"), 
                                   assay=default_assay, 
                                   layer="data",
                                   latent_vars=param("latent_vars"),
                                   results=markers_filt$all)

if (markers_found) {
  # Plot number of markers
  p = DegsPlotNumbers(markers_filt$all,
                      group="cluster") 
  p
} else {
  CalloutBox("No markers (cluster vs rest) found. In the following, code and plots that are not applicable are skipped.", type="warning")
}
```

### Table of top markers

We use the term "markers" to specifically describe features that are up-regulated in barcodes of one cluster compared to the rest.

```{r}
#| label: tbl-cluster_annotation_markers_table 
#| eval: !expr markers_found
#| tbl-cap: "Top markers per cluster"

if (markers_found) {
  markers_top = DegsUpDisplayTop(markers_filt$up, n=5)
  
  # Highlight rows per cluster for better readability
  rows_cluster_nums = factor(markers_top$cluster, levels=unique(markers_top$cluster)) %>% as.integer()
  rows_to_highlight = which(rows_cluster_nums %% 2 == 0)
  
  # Show table
  gt(markers_top) %>% 
      tab_options(container.height=450) %>%
      tab_style(
        style = cell_fill(color="grey80"),
        locations = cells_body(rows=rows_to_highlight)
      )  
}
```

### Visualization of top marker genes

The following plots visualize the top markers for each cluster, respectively. Clear markers indicate good clusters that represent barcode types.

```{r}
#| label: cluster_annotation_markers_plot
#| eval: !expr markers_found
#| results: asis

if (markers_found) {
    
    # Set up layout and automatically generate chunks
    # Feature and violin plots
    chunk_template1 = "
\`\`\`{r}
#| label: fig-cluster_annotation_markers_{{type}}_cluster{{cluster}}_{{gene_patched}}
#| fig-cap: Cluster {{cluster}}, {{gene}}
#| fig-width: 4
#| fig-height: 3
#| echo: false

plist[['{{gene}}']]
\`\`\`
"
    # Dotplots
    chunk_template2 = "
\`\`\`{r}
#| label: fig-cluster_annotation_markers_{{type}}
#| fig-cap: {{caption}}

p
\`\`\`
"
    
    # Create one tab per plot type
    cat("\n::: panel-tabset\n")
    
    # Feature plots and violin plots
    for (type in c("FeaturePlot", "ViolinPlot")) {
        cat("\n#####", type, "\n")
        
        # Loop through clusters 
        for (cl in markers_top$cluster %>% levels()) {
            plist = list()
            markers_top_cl = markers_top %>% dplyr::filter(cluster==cl)
            
            # Produce plots
            if (type == "FeaturePlot") {
                plist = Seurat::FeaturePlot(sc, features=markers_top_cl$gene, order=TRUE, combine=FALSE)
                plist = lapply(plist, function(p) {
                    p = p + viridis::scale_color_viridis() + 
                        AddPlotStyle(legend_position="right", xlab="", ylab="") +
                        theme(legend.key.width = unit(0.02, "npc"))
                    p = Seurat::LabelClusters(p, id="ident", box=TRUE, fill="white", colour="black", label.padding=unit(0.05, "lines"))
                    return(p)
                })
                
            } else if (type == "ViolinPlot") {
                plist = Seurat::VlnPlot(sc, features=markers_top_cl$gene, assay=default_assay, pt.size=0, cols=ScColours(sc, "seurat_clusters"), flip=TRUE, combine=FALSE)
                plist = lapply(plist, function(p) {
                    p = p + AddPlotStyle(legend_position="none", xlab="Cluster", ylab="") +
                        theme(axis.text.x = element_text(angle=45, hjust=1, vjust=1))
                    return(p)
                })
            }
            names(plist) = markers_top_cl$gene
            
            # Layout plots  (3 plots per row)
            cat("\n###### Cluster ", cl, "\n")
            cat("\n::: {layout-ncol=2}\n")
            
            # Loop through genes
            for (gene in names(plist)) {
                # Note: 'gene_patched' is 'gene' but with special characters removed since it will be used for the plot name
                chunk_filled =  knitr::knit_expand(text=chunk_template1, type=type, cluster=cl, gene=gene, gene_patched=MakeNamesValid(gene))
                if(interactive()) {
                    print(EvalKnitrChunk(chunk_filled))
                } else {
                    chunk_filled = knitr::knit_child(text=chunk_filled, envir=environment(), quiet=TRUE)
                    cat(chunk_filled, sep='\n')
                }
            }
            
            cat(":::\n")
        }
    }
    
    # Dot plots (scaled and unscaled)
    for (type in c("DotPlotScaled", "DotPlotNonscaled")) {
        cat("\n#####", type, "\n")
        
        # Produce plots
        if (type == "DotPlotScaled") {
            p = Seurat::DotPlot(sc, features=markers_top$gene %>% unique()) + 
                viridis::scale_color_viridis() + 
                AddPlotStyle(ylab="Cluster", xlab="", legend_position="bottom") + 
                theme(axis.text.x = element_text(angle=90, hjust=1, vjust=.5)) + 
                guides(size=guide_legend(order=1, title="Pct expressed"),
                       color = guide_colorbar(title = "Scaled Expression"))
            caption = "Top markers per cluster (expression scaled)"
            
        } else if (type == "DotPlotNonscaled") {
            p = Seurat::DotPlot(sc, features=markers_top$gene %>% unique(), scale=FALSE) + 
                viridis::scale_color_viridis() + 
                AddPlotStyle(ylab="Cluster", xlab="", legend_position="bottom") + 
                theme(axis.text.x = element_text(angle=90, hjust=1, vjust=.5)) + 
                guides(size=guide_legend(order=1, title="Pct expressed"),
                       color = guide_colorbar(title = "Average Expression"))
            caption = "Top markers per cluster (expression unscaled)"
        }
        
        # Print
        chunk_filled =  knitr::knit_expand(text=chunk_template2, type=type, caption=caption)
        if(interactive()) {
            print(EvalKnitrChunk(chunk_filled))
        } else {
            chunk_filled = knitr::knit_child(text=chunk_filled, envir=environment(), quiet=TRUE)
            cat(chunk_filled, sep='\n')
        }
    }
    cat(":::\n")
}
```
### Over representation analysis of marker genes

This section presents the results of the over representation analysis (ORA) performed on the marker genes identified for each cluster, focusing specifically on the [C8 collection](https://www.gsea-msigdb.org/gsea/msigdb/human/collections.jsp#C8) (cell type signature genesets) of the Molecular Signatures Database (MSigDB). ORA is a statistical method that determines whether a set of genes is enriched in a particular biological process or pathway (geneset). The analysis helps to identify cell type signatures that are significantly over-represented in the marker genes of each cluster, providing insights into the cell annotation of clusters.

::: {.callout-note}

The gene sets present in C8 collection covers various cell types from Heart, GI Tract, Pancreas, Kidney, Liver, the Immune system, Retina, Olfactory tissue, and the Brain. So don't be surprised if you see a cell type annotated here that should not be in your data.

:::

::: {.callout-note}

The C8 collection contains the genesets for <i>Homo sapiens</i>. Using MSigDbr R-package, these genesets are retrieved and converted to target organism. Check [msigdbr::msigdbr_species()](https://cran.r-project.org/web/packages/msigdbr/vignettes/msigdbr-intro.html) for supported species.

:::

```{r}
#| label: cluster_annotation_markers_ora
#| echo: false
#| results: asis
#| fig-cap: "Over representation analysis of marker genes"

species <- gsub("_", " ", stringr::str_to_title(param("species")))
species_tibble <- msigdbr_species()

if(any(species_tibble$species_name == species)) {
  geneset_msigdb <- msigdbr(species = species, category = "C8")
  term2gene <- geneset_msigdb %>% 
    dplyr::select(gs_name, gene_symbol) %>% 
    as.data.frame()

  # Get marker genes per cluster
  markers_up_per_cluster <- split(markers_filt$up$gene, markers_filt$up$cluster)
  markers_down_per_cluster <- split(markers_filt$down$gene, 
                                    markers_filt$down$cluster)


  # Perform ORA for each cluster
  ora_up_results <- lapply(names(markers_up_per_cluster), function(cluster) {
    perform_ora(genes = markers_up_per_cluster[[cluster]], 
    universe = rownames(sc), 
    cluster = cluster, 
    term2gene = term2gene)
  })

  # Combine results
  ora_up_results_combined <- do.call(rbind, ora_up_results)

   # Plot results
  if (!is.null(ora_up_results_combined) && nrow(ora_up_results_combined) > 0) {
    top_terms <- ora_up_results_combined %>%
      group_by(Cluster) %>%
      top_n(3, wt = -p.adjust) %>%
      ungroup() %>%
      mutate(Cluster = factor(as.numeric(Cluster))) %>%
      mutate(Description = factor(Description, levels = 
                                    unique(Description[order(Cluster)])))
    
    p <- ggplot(top_terms, aes(x = Cluster, y = Description, size = Count, 
                               color = p.adjust)) +
      geom_point() +
      scale_color_viridis_c(direction = -1, 
                            labels = label_scientific(digits = 3)) +
      theme_minimal() +
      theme(axis.text.x = element_text(size = 6, angle = 75, hjust = 1)) +
      labs(x = "Cluster", y = "C8 genesets", size = "Gene Count", 
           color = "Adjusted p-value") +
      theme(legend.position = "right") +
      scale_y_discrete(labels = function(y) str_wrap(gsub("_", " ", y), 
                                                     width = 30)) + 
      coord_flip()

    print(p)
    
    names(ora_up_results) <- names(markers_up_per_cluster)
    
    # Create a new Excel workbook
    wb <- createWorkbook()
    
    # Loop through the list and add each data frame as a sheet
    for (name in names(ora_up_results)) {
      addWorksheet(wb, name)  # Use the list name as sheet name
      writeData(wb, name, ora_up_results[[name]])  # Write the data frame
    }
    
    # Save the workbook
    saveWorkbook(wb, "marker_annotation_C8_ora.xlsx", overwrite = TRUE)
  } else {
    CalloutBox("No significant up-regulated terms found for any cluster.", 
               type="note")
  }

} else {
  CalloutBox("ORA skipped; provided species not in MSigdbr.", type="note")
}

```

## Known marker genes {.tabset}

Do cells in individual clusters express provided known marker genes?

```{r}
#| label: cluster_annotation_known_markers
#| results: asis

file_known_markers = param("file_known_markers")
known_markers_list = list()
known_markers_n = 0
known_markers_vect = 0
idx_dotplot = c()

if (!is.null(file_known_markers)) {
    # Read known marker genes
    known_markers = openxlsx::read.xlsx(file_known_markers, check.names=FALSE, sep.names=" ")
    
    # Convert to list
    # Remove NAs and space chars
    known_markers_list = lapply(colnames(known_markers), function(x) {
        known_markers[,x] %>% na.exclude() %>% 
            gsub(pattern=" ", replacement="", fixed=TRUE) %>% 
            as.character() %>%
            unique()
    })
    names(known_markers_list) = colnames(known_markers)
    
    # Fetch annotation for default assay 
    annot = sc[[default_assay]][[]] %>% dplyr::select(dplyr::starts_with("ensembl_"))
    
    # Fetch annotation for default assay
    # Note: When using SCT, need to use the original assay
    d = gsub(pattern="_SCT$", replacement="", default_assay)
    annot = sc[[d]][[]] %>% dplyr::select(dplyr::starts_with("ensembl_"))
    
    # Translate to gene symbols if available
    if (ncol(annot) > 0) {
        for (n in names(known_markers_list)) {
            x = known_markers_list[[n]] %in% annot$ensembl_id
            if (any(!x)) {
                y = known_markers_list[[n]][!x]
                CalloutBox("The following genes of marker list {n} cannot be found in the data: {y*}.", type="warning")
            }
            
            idx = match(known_markers_list[[n]][x], annot$ensembl_id)
            known_markers_list[[n]] = rownames(annot)[idx] %>% unique()
        }
    } 
    
    # Remove empty lists
    is_empty = purrr::map_int(known_markers_list, .f=length) == 0 
    known_markers_list = known_markers_list[!is_empty]
    
    # Count what is left
    if(length(known_markers_list) > 0) { 
        known_markers_n = length(known_markers_list) 
        known_markers_vect = unlist(known_markers_list) %>% unique() %>% sort()
        idx_dotplot = sapply(seq(known_markers_list), function(x) length(known_markers_list[[x]]) <= 50)
    }
    
    # Calculate combined scores with UCell
    if(length(known_markers_list) > 0) {
        # Calculate scores based on the Mann-Whitney U statistic using UCell
        with_progress({
            known_markers_scores = CalculateModuleScoreUCell(matrix=Seurat::GetAssayData(sc, assay=default_assay, layer="counts"), features=known_markers_list, chunk_size=10000)
        }, enable=verbose)
        
        # Make names valid for Seurat (get rid of special characters etc)
        names(known_markers_scores) = paste0("UCell_", MakeNamesValid(names(known_markers_list)))
        
        # Add to Seurat object
        sc = SeuratObject::AddMetaData(sc, known_markers_scores)
    }
}
```

You provided `r length(known_markers_list)` list(s) of known marker genes. In the following tabs, you find:

-   Dot plots for all gene lists containing at most 50 genes
-   Individual feature plots for all genes if there are no more than 100 genes in total

### Dot plot(s)

A dot plot visualizes how gene expression changes across different clusters. The size of a dot encodes the percentage of cells in a cluster that expresses the gene, while the color encodes the scaled average expression across all cells within the cluster. Per gene (column), we group cells based on cluster identity (rows), calculate average expression per cluster, subtract the mean of average expression values and divide by the standard deviation. The resulting scores describe how high or low a gene is expressed in a cluster compared to all other clusters.

```{r}
#| label: cluster_annotation_known_dotplots
#| results: asis

if ((known_markers_n > 0) & any(idx_dotplot)) {
  known_markers_dotplot = known_markers_list[idx_dotplot]
  plist = list()
  for (n in names(known_markers_dotplot)) {
    g = known_markers_dotplot[[n]]
    g = g[length(g):1]
    plist[[n]] = Seurat::DotPlot(sc, features=g) + 
        viridis::scale_color_viridis() + 
        AddPlotStyle(title=n, ylab="Cluster", xlab="", legend_position="bottom") + 
        theme(axis.text.x=element_text(angle=90, hjust=1, vjust=.5)) +
        lims(size=c(0,100)) +
        guides(size=guide_legend(order=1, title="Pct expressed"),
            color = guide_colorbar(title = "Scaled Expression"))
  }
  names(plist) = names(known_markers_dotplot)
  
  # Set up layout and automatically generate chunks
  chunk_template = "
\`\`\`{r}
#| label: fig-cluster_annotation_known_list{{i}}_dotplot
#| fig-cap: {{name}}

plist[['{{name}}']]
\`\`\`
"

  cat("::: panel-tabset\n")

  # Loop through plots
  for (i in seq(known_markers_list)) {
    name = names(plist)[i]
    if (!name %in% names(known_markers_dotplot)) next

    cat("#####", name, "\n")
    
    chunk_filled =  knitr::knit_expand(text=chunk_template, name=name, i=i)
    if(interactive()) {
      print(EvalKnitrChunk(chunk_filled))
    } else {
      chunk_filled = knitr::knit_child(text=chunk_filled, envir=environment(), quiet=TRUE)
      cat(chunk_filled, sep='\n')
    }
  }
  
  cat(":::\n")
} else if ((known_markers_n > 0) & !any(idx_dotplot)) {
  CalloutBox("This tab is used for dot plots for up to 50 genes. All provided lists are longer than this, and hence dot plots are skipped.", type="note")
} else {
  CalloutBox("No known marker genes were provided and hence dot plots are skipped.", type="note")
}
```

### Combined score feature plots

An combined feature plot visualises the combined score of each gene list on a single-cell level. The combined score is calculated based on the Mann-Whitney U statistic using UCell. Scores can range between 0 and 1. The closer a score gets to 1, the more genes of a list are among the top expressed genes.

```{r}
#| label: cluster_annotation_known_scoreplots
#| results: asis

if (markers_found > 0) {

  # Produce plots (feature and violin plots)
  plist = list()
  
  for (name in names(known_markers_list)) {
      p1 = Seurat::FeaturePlot(sc, features=paste0("UCell_", MakeNamesValid(name)), order=TRUE) +
          viridis::scale_color_viridis() + 
          AddPlotStyle(title=name, xlab="", ylab="") +
          theme(legend.key.width = unit(0.02, "npc"))
      p1 = Seurat::LabelClusters(p1, id="ident", box=TRUE, fill="white", colour="black", label.padding=unit(0.05, "lines"))
      
      p2 = Seurat::VlnPlot(sc, features=paste0("UCell_", MakeNamesValid(name)), pt.size=0, cols=ScColours(sc, "seurat_clusters"), flip=TRUE) +
          AddPlotStyle(title="", legend_position="none", xlab="Cluster", ylab="") +
          theme(axis.text.x = element_text(angle=45, hjust=1, vjust=1))
      
      plist[[name]] = patchwork::wrap_plots(p1, p2, ncol=2)
  }
  
  # Set up layout and automatically generate chunks
  chunk_template = "
\`\`\`{r}
#| label: fig-cluster_annotation_known_list{{i}}_scoreplot
#| fig-cap: {{name}}
#| echo: false
#| fig-height: 3

plist[['{{name}}']]
\`\`\`
"
  # Loop through plots
  for (i in seq(plist)) {
    name = names(plist)[i]
    chunk_filled =  knitr::knit_expand(text=chunk_template, name=name, i=i)
    if(interactive()) {
      print(EvalKnitrChunk(chunk_filled))
    } else {
      chunk_filled = knitr::knit_child(text=chunk_filled, envir=environment(), quiet=TRUE)
      cat(chunk_filled, sep='\n')
    }
  }
  
}
```

### Individual feature plots

An individual feature plot colors single cells according to normalized gene expression.

```{r}
#| label: cluster_annotation_known_individual_featureplots
#| results: asis

if ((known_markers_n > 0) & length(known_markers_vect) <= 100) {
    
    # Set up layout and automatically generate chunks
    chunk_template = "
\`\`\`{r}
#| label: fig-cluster_annotation_known_list{{i}}_{{gene_patched}}
#| fig-cap: {{gene}}
#| echo: false
#| fig-width: 4
#| fig-height: 3

plist[['{{gene}}']]
\`\`\`
"
    
    cat("::: panel-tabset\n")
    # Loop through lists
    for (i in seq(known_markers_list)) {
        lst = names(known_markers_list)[i]
        cat("#####", lst, "\n")
        
        # Produce plots
        plist = Seurat::FeaturePlot(sc, features=known_markers_list[[i]], combine=FALSE, order=TRUE)
        plist = purrr::map(plist, function(p) {
            p = p + viridis::scale_color_viridis() + AddPlotStyle(xlab="", ylab="") +
                theme(legend.key.width = unit(0.02, "npc"))
            p = Seurat::LabelClusters(p, id="ident", box=TRUE, fill="white", colour="black", label.padding=unit(0.05, "lines"))
            return(p)
        })
        names(plist) = known_markers_list[[i]]
        
        # Plot in two column layout
        cat("::: {layout-ncol=2}\n")
        
        # Loop through genes
        for (gene in names(plist)) {
            chunk_filled =  knitr::knit_expand(text=chunk_template, gene=gene, gene_patched=MakeNamesValid(gene), i=i)
            if(interactive()) {
                print(EvalKnitrChunk(chunk_filled))
            } else {
                chunk_filled = knitr::knit_child(text=chunk_filled, envir=environment(), quiet=TRUE)
                cat(chunk_filled, sep='\n')
            }
        }
        cat(":::\n")
    }
    cat(":::\n")
    
} else if (length(known_markers_vect) > 100) { 
    CalloutBox("This tab is used to plot up to 100 known marker genes. Your provided list is longer than this, and hence individual feature plots are skipped.", type="note")
} else {
    CalloutBox("No known marker genes were provided and hence individual feature plots are skipped.", type="note")
}
```

## Output files

### Markers

```{r}
#| label: cluster_annotation_save_markers
#| results: asis

# Write markers
outfile = paste0("markers.xlsx")

# Bring gene column to the first position, for better reading of the results
markers_out = markers_out %>% dplyr::select(gene, everything())

# Add Ensembl annotation if Ensembl was used 
# This table has 0 columns if no Ensembl was used
annot_ensembl = sc[[default_assay]][[]] %>% dplyr::select(dplyr::starts_with("ensembl_"))

# Split by cluster and write to file (function "DegsWriteToFile" in "R/functions_degs.R")
invisible(DegsWriteToFile(split(markers_out, markers_out$cluster),
                          annot_ensembl=annot_ensembl,
                          file=file.path(module_dir, "results", "markers.xlsx")))

# Note
CalloutBox("Marker features are written to {outfile}.", type="note")
```

### Software

```{r}
#| label: cluster_annotation_save_software  

sessioninfo = ScrnaseqSessionInfo(getwd()) %>% as.data.frame()
gt(sessioninfo)
```

```{r}
#| label: cluster_annotation_save_seurat
#| results: asis

# This will overwrite the (bugged) function SeuratObject::SaveSeuratRds with the content of our function SaveSeuratRds_Fixed
assignInNamespace("SaveSeuratRds",SaveSeuratRds_Fixed, ns="SeuratObject")

# Save Seurat object and layer data
outdir = file.path(module_dir, "sc")
with_progress({
  SaveSeuratRdsWrapper(sc,
                       on_disk_layers=on_disk_counts,
                       outdir=outdir)
}, enable=verbose)
```

```{r}
#| label: cluster_annotation_finish

# Stop multisession workers
plan(sequential)
```
