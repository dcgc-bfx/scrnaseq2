---
# Module-specific parameters (that are not already in the profile yaml)
# Defaults
params:
  # Name of the module used in configurations
  module: "clusterqc"
    
  # Relative path to the module directory (which contains the qmd file)
  module_dir: "modules/6_clusterqc"

  # Path to previous module. If null, will be read from the 'chapters' entry in the profile yaml
  # NOTE: Change to null if all modules are implemented and sc objects are written
  prev_module_dir: null
  
  # Default assay and normalization
  default_assay: null

  # QC measures to look at 
  barcode_qc:
  - "nCount_RNA"
  - "nFeature_RNA"
  - "pMito_RNA"
  - "pRibosomal_RNA"
  - "pGlobin_RNA"
  - "pERCC_RNA"
  - "pXIST_RNA"
  - "pChrY_RNA"
  - "scrublet_doublet_scores"
    
  # For large datasets: Do not keep counts in memory but store on disk in matrix directories. 
  # Computations will access only the relevant parts of the data. 
  # Once done, matrix directories will be saved together with the Seurat object in the module directory.
  on_disk_counts: true
  
  # For large datasets: Copy matrix directories to a temporary directory for computations. 
  # This will improve performance if the temporary directory  has a better performance than normal disks (e.g. SSD). 
  # Once done, matrix directories will be copied back to the module directory. 
  # The temporary directory will be deleted once the R session exists.
  on_disk_use_tmp: true
  
  # Number of cores to use for computations
  cores: 4
  
# Module execution
execute:
  # Should this module be frozen and never re-rendered?
  # - auto: if the code has not changed (default)
  # - true/false: freeze/re-render
  # Does not apply in interactive mode or when explicitly rendering this document via in rstudio
  freeze: auto
---

# Cluster QC

```{r}
#| label: setup

# If running code interactively in rstudio, set profile here
# When rendering with quarto, profile is already set and should not be overwritten
if (nchar(Sys.getenv("QUARTO_PROFILE")) == 0) {Sys.setenv("QUARTO_PROFILE" = "scrnaseq")}

# Load libraries
library(knitr)
library(magrittr)
library(gt)
library(Seurat)
library(ggplot2)
library(future)
library(patchwork)

# Get module name and directory (needed to access files within the module directory)
module_name = params$module_name
module_dir = params$module_dir
```

```{r}
#| label: clusterqc_preparation

# CODE
# Working directory is automatically back to scrnaseq2 at this point
# Source general configurations (always)
source("R/general_configuration.R")

# Source required R functions
source("R/functions_util.R")
source("R/functions_io.R")
source("R/functions_plotting.R")
source("R/functions_analysis.R")

# Be verbose or not
verbose = param("verbose")

# Parallelisation plan for all functions that support future
plan(multisession, workers=param("cores"))

# DIRECTORIES
# Module directory 'results' contains all output that should be provided together with the final report of the project
dir.create(file.path(module_dir, "results"), showWarnings=FALSE)
files = list.files(path=file.path(module_dir, "results"), full.names=TRUE)
if (length(files) > 0) unlink(files, recursive=TRUE)

# Module directory 'sc' contains the final Seurat object
dir.create(file.path(module_dir, "sc"), showWarnings=FALSE)
files = list.files(path=file.path(module_dir, "sc"), full.names=TRUE)
if (length(files) > 0) unlink(files, recursive=TRUE)

# SEURAT OBJECT
# Read in seurat object
if (!is.null(param("prev_module_dir"))) {
  prev_module_dir = param("prev_module_dir")
} else {
  prev_module_dir = PreviousModuleDir(module_dir)
}
prev_sc_obj = file.path(prev_module_dir, "sc", "sc.rds")
if(!file.exists(prev_sc_obj)) {
  stop(FormatString("Could not find a sc.rds file in {{prev_module_dir}}. Was the respective module already run?"))
}
sc = SeuratObject::LoadSeuratRds(prev_sc_obj)

# Set default assay standard
default_assay = param("default_assay")
if (is.null(default_assay)) default_assay = Seurat::DefaultAssay(sc)
Seurat::DefaultAssay(sc) = default_assay

# ON-DISK LAYERS (if used)
on_disk_counts = param("on_disk_counts")

# If requested, move on-disk layers to faster temp location for faster access
#on_disk_use_tmp = param("on_disk_use_tmp")

# Note: counts data is not used in this module, therefore deactivated
on_disk_use_tmp = FALSE
if (on_disk_counts & on_disk_use_tmp) {
  on_disk_path = tempdir()
  with_progress({
    sc = UpdateMatrixDirs(sc, dir=on_disk_path)
  }, enable=verbose)
}
```

## Quality Control 

Do cells in individual clusters have particularly high counts, detected genes or mitochondrial content?

```{r}
#| label: clusterqc
#| results: asis

# QC features to plot
barcode_qc = param("barcode_qc")
f = barcode_qc %in% colnames(sc[[]])
if (!all(f)) {
  CalloutBox(x="Cannot find QC {barcode_qc[!f]*} in barcode metadata.", type="warning")
  barcode_qc = barcode_qc[f]
}

# Don't plot QC if there aren't any features to plot
if (length(barcode_qc) > 0) {
    
  # If there are more than 25 cluster, plots need to be optimised so that they are not too crowded
  optimise_plots = levels(sc$seurat_clusters) %>% length() >= 25

  # Left: QC on UMAP
  plist1 = Seurat::FeaturePlot(sc, features=barcode_qc, combine=FALSE, order=TRUE)
  for (i in seq(plist1)) {
    q = barcode_qc[i]
    
    plist1[[i]] = plist1[[i]] + 
        AddPlotStyle(title=q, xlab="", ylab="") +
        viridis::scale_color_viridis(trans=ifelse(grepl(pattern="nCount", q), "log10", "identity")) +
        theme(legend.key.width = unit(0.01, "npc"), legend.position=ifelse(optimise_plots, "none", "right"))
    plist1[[i]] = Seurat::LabelClusters(plist1[[i]], id="ident", box=TRUE, fill="white", label.padding=unit(0.05, "lines"))
  }
  names(plist1) = barcode_qc
  
  # Right: QC as violin plots
  plist2 = lapply(barcode_qc, function(x) {
    p = ggplot(sc[[]] %>% dplyr::select(seurat_clusters, qc=x), 
               aes(x=seurat_clusters, y=qc, fill=seurat_clusters, group=seurat_clusters)) + 
      geom_violin(scale="width", linewidth=ifelse(optimise_plots, 0.1, 0.5)) + 
      scale_x_discrete(guide=guide_axis(n.dodge=ifelse(optimise_plots, 2, 1))) +
      # scale_y_continuous(trans=ifelse(grepl(pattern="nCount", x), "log10", "identity")) +
      AddPlotStyle(fill=ScColours(sc, "seurat_clusters"), xlab="", legend_position="none", title="") +
      theme(axis.text.x=element_text(angle=45, hjust=1, vjust=1))
    return(p)
  })
  names(plist2) = barcode_qc
  
  # Combine both plots with the patchwork library
  plist = lapply(barcode_qc, function(x) {
    p = plist1[[x]] + plist2[[x]]
    return(p)
  })
  captions = GeneratePlotCaptions(barcode_qc, assay_names=SeuratObject::Assays(sc), capitalize=TRUE)
  names(plist) = names(captions) = barcode_qc
  
  # Set up layout and automatically generate chunks
  chunk_template = "
##### {{type}}

\`\`\`{r}
#| label: fig-clusterqc_{{type}}
#| fig-cap: {{caption}}
#| fig-height: 3

plist[['{{type}}']]
\`\`\`
"
  
  cat("::: panel-tabset\n")
  
  for (x in barcode_qc) {
    chunk_filled =  knitr::knit_expand(text=chunk_template, type=x, caption=captions[x])
    if(interactive()) {
      print(EvalKnitrChunk(chunk_filled))
    } else {
      chunk_filled = knitr::knit_child(text=chunk_filled, envir=environment(), quiet=TRUE)
      cat(chunk_filled, sep='\n')
    }
  }
  
  cat(":::\n")
}
```

## Cell Cycle Effects {#sec-clusterqc-cc}

How much do gene expression profiles in the dataset reflect the cell cycle phases the single cells were in? After initial normalisation, we determined the effects of cell cycle heterogeneity by calculating a score for each cell based on its expression of G2M and S phase markers. Scoring is based on the strategy described in @Tirosh_2016, and human gene symbols are translated to gene symbols of the species of interest using biomaRt. This section of the report visualizes the above calculated cell cycle scores.

Alternatively, the expression of MKI67 (a common G2M phase marker) and PCNA (a common S phase marker), if available, can be used to get an impression of possible cell-cycle effects in the data.

```{r}
#| label: clusterqc_cellcycle
#| results: asis

# Do we have cell cycle scores?
have_cellcyle_scores = sc$Phase %>% is.na() %>% all() %>% not()

if (!have_cellcyle_scores) CalloutBox(x="All cell cycle scores are zero and cell cycle information is not available. Most likely there were not enough S or G2M phase genes available for calculation.", type="warning")

# Do we have MKI67 and PCNA?

# Get symbol for MKI67 (G2M phase) and PCNA (S phase) from the gene lists for cell cycle
# Note: the names of the list values correspond to the human gene symbols and the values to the species-specific gene symbols
seurat_g2m_genes = ScLists(sc, lists_slot="gene_lists", list="CC_G2M_phase")
idx = match("MKI67", names(seurat_g2m_genes))
if (!is.na(idx)) {
  mki67 = seurat_g2m_genes[[idx[1]]]
} else {
  mki67 = NULL
  CalloutBox(x="Could not find 'PCNA' or its orthologue in the data!", type="warning")
}

seurat_s_genes = ScLists(sc, lists_slot="gene_lists", list="CC_S_phase")
idx = match("PCNA", names(seurat_s_genes))
if (!is.na(idx)) {
  pcna = seurat_s_genes[[idx[1]]]
} else {
  pcna = NULL
  CalloutBox(x="Could not find 'MKI67' or its orthologue in the data!", type="warning")
}
cell_cycle_markers = c(mki67, pcna)
```

```{r}
#| label: fig-clusterqc_cellcycle
#| eval: !expr have_cellcyle_scores
#| include: !expr have_cellcyle_scores
#| fig-cap: Cell Cycle Effects
#| fig-height: 4

    
# If there are more than 25 cluster, plots need to be optimised so that they are not too crowded
optimise_plots = levels(sc$seurat_clusters) %>% length() >= 25

# Left: How strong are cell cycle effects?
p1 = ggplot(sc[[]] %>% dplyr::select(S.Score, G2M.Score, Phase), 
            aes(x=S.Score, y=G2M.Score, colour=Phase)) +
  geom_point() +
  AddPlotStyle(col=ScColours(sc, "Phase"), xlab="S score", ylab="G2/M score", legend_position="bottom")

# Middle: Phases per cluster
p2 = ggplot(sc[[]] %>% 
              dplyr::group_by(seurat_clusters, Phase) %>% 
              dplyr::summarise(num_cells=length(Phase)), 
            aes(x=seurat_clusters, y=num_cells, fill=Phase)) + 
  geom_bar(stat="identity", position="fill") + 
  AddPlotStyle(fill=ScColours(sc, "Phase"), xlab="", y="Fraction of cells", legend_position="bottom") + 
  theme(axis.text.x = element_text(angle=30, hjust=1, vjust=1)) 

# Right: Phases per sample
p3 = ggplot(sc[[]] %>% 
              dplyr::group_by(orig.ident, Phase) %>% 
              dplyr::summarise(num_cells=length(Phase)), 
            aes(x=orig.ident, y=num_cells, fill=Phase)) + 
  geom_bar(stat="identity", position="fill") + 
  AddPlotStyle(fill=ScColours(sc, "Phase"), xlab="", ylab="Fraction of cells", legend_position="bottom") + 
  theme(axis.text.x = element_text(angle=45, hjust=1, vjust=1))

# Combine plots with the patchwork library
if (optimise_plots) {
  p = (p1 + p3)/p2 & theme(legend.position="right")
} else {
  p = p1 + p2 + p3 & theme(legend.position="bottom")
}

p = p + patchwork::plot_annotation(title="Cell cycle phases") + patchwork::plot_layout(guides="collect")
p
```

```{r}
#| label: clusterqc_cellcycle_umap
#| eval: !expr have_cellcyle_scores | length(cell_cycle_markers) > 0
#| include: !expr have_cellcyle_scores | length(cell_cycle_markers) > 0
#| results: asis

plist = list()

if (have_cellcyle_scores) {
    # Phases on UMAP
    plist[["Phase"]] = Seurat::DimPlot(sc, group.by="Phase", pt.size=1, cols=ScColours(sc, "Phase")) + 
      AddPlotStyle(title="", xlab="", ylab="")
    
    # Hack to colour by phase but label by
    barcodes = rownames(plist[["Phase"]]$data)
    plist[["Phase"]]$data$ident = sc[["seurat_clusters"]][barcodes,]
    plist[["Phase"]] = LabelClusters(plist[["Phase"]], id="ident", box=TRUE, fill="white", colour="black", label.padding=unit(0.05, "lines"))
    
    
    for (i in c("S.Score", "G2M.Score", "CC.Difference")) {
      plist[[i]] = FeaturePlot(sc, features=i, pt.size=1, order=TRUE) +
        AddPlotStyle(title="") + 
        viridis::scale_color_viridis()
      plist[[i]] = LabelClusters(plist[[i]], id="ident", box=TRUE, fill="white", colour="black", label.padding=unit(0.05, "lines"))
    }
}

if (length(cell_cycle_markers) > 0) {
    for (i in cell_cycle_markers) {
      plist[[i]] = FeaturePlot(sc, features=i, pt.size=1, order=TRUE) +
        AddPlotStyle(title="") + 
        viridis::scale_color_viridis()
      plist[[i]] = LabelClusters(plist[[i]], id="ident", box=TRUE, fill="white", colour="black", label.padding=unit(0.05, "lines"))
    }
}
    
captions = paste("UMAP coloured by", names(plist))
names(captions) = names(plist)

# Set up layout and automatically generate chunks
chunk_template = "
##### {{type}}

\`\`\`{r}
#| label: fig-clusterqc_cellcycle_umap_{{type}}
#| fig-cap: {{caption}}

plist[['{{type}}']]
\`\`\`
"

cat("::: panel-tabset", sep="\n")

for (i in names(plist)) {
  chunk_filled = knitr::knit_expand(text=chunk_template, type=i, caption=captions[i])
  if(interactive()) {
    print(EvalKnitrChunk(chunk_filled))
  } else {
    chunk_filled = knitr::knit_child(text=chunk_filled, envir=environment(), quiet=TRUE)
    cat(chunk_filled, sep='\n')
  }
}

cat(":::", sep="\n")
```


## Software

```{r}
#| label: clusterqc_save_software

sessioninfo = ScrnaseqSessionInfo(getwd()) %>% as.data.frame()
gt(sessioninfo)
```

## Parameter

```{r}
#| label: read_data_save_parameter  

paraminfo = ScrnaseqParamsInfo(param()) %>% as.data.frame()
gt(paraminfo)
```

```{r}
#| label: clusterqc_save_seurat

# Save Seurat object and layer data
# Note: counts and normalized data have not been changed in this module, no copying needed
outdir = file.path(module_dir, "sc")
with_progress({
  SaveSeuratRdsWrapper(sc,
                       outdir=outdir,
                       copy_disk_data=FALSE,
                       relative_paths=FALSE,
                       compress=FALSE
                       )
}, enable=verbose)
```

```{r}
#| label: clusterqc_finish

# Stop multisession workers
plan(sequential)
```
